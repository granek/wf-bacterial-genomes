params.help = ""

params {
    help = false
    version = false
    out_dir = "output"
    fastq = null
    reference = null
    threads = 3
    chunk_size = 1000000
    run_prokka = true
    prokka_opts = null
    aws_image_prefix = null
    aws_queue = null
    sample = null
    sample_sheet = null
    disable_ping = false
    reference_based_assembly = false
    basecaller_cfg = "dna_r10.4.1_e8.2_400bps_sup@v4.2.0"
    medaka_variant_model = null
    medaka_consensus_model = null
    flye_opts = null

    isolates = false
    resfinder_version = "4.3.2"
    resfinder_threshold = "0.8"
    resfinder_coverage = "0.6"
    mlst_version = "2.23.0"

    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    analyse_unclassified = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wf'

    wf {
      fastcat_stats = true  
      example_cmd = [
            "--fastq 'wf-bacterial-genomes-demo/isolates_fastq'",
            "--isolates",
            "--reference_based_assembly",
            "--reference 'wf-bacterial-genomes-demo/ref/ref.fasta.gz'",
            "--sample_sheet 'wf-bacterial-genomes-demo/isolates_sample_sheet.csv'"
      ]
      common_sha = "sha0a6dc21fac17291f4acb2e0f67bcdec7bf63e6b7"
      container_sha = "sha86c7e96cdb0bc0526f3c7686212f46bc98a7eb42"
      container_sha_prokka = "sha08669655982fbef7c750c7895e97e100196c4967"
      container_sha_medaka = "sha492176b6093aa922aae5610f6ad899aacd2c3c7f"
      agent = null
    }
}

manifest {
    name            = 'epi2me-labs/wf-bacterial-genomes'
    author          = 'Oxford Nanopore Technologies'
    homePage        = 'https://github.com/epi2me-labs/wf-bacterial-genomes'
    description     = 'Assembly, variant calling, and annotation of bacterial genomes.'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.04.2'
    version         = 'v0.4.0'
}

epi2melabs {
  tags = "denovo,alignment,mosdepth"
  icon = "faBacterium"
}

executor {
    $local {
        cpus = 4
        memory = "8 GB"
    }
}

// used by default for "standard" (docker) and singularity profiles,
// other profiles may override.
process {
    withLabel:wf_common {
        container = "ontresearch/wf-common:${params.wf.common_sha}"
    }   
    withLabel:wfbacterialgenomes {
        container = "ontresearch/wf-bacterial-genomes:${params.wf.container_sha}"
    }
    withLabel:prokka {
        container = "ontresearch/prokka:${params.wf.container_sha_prokka}"
    }
    withLabel:medaka {
        container = "ontresearch/medaka:${params.wf.container_sha_medaka}"
    }
    withLabel:amr {
        container = "genomicepidemiology/resfinder:${params.resfinder_version}"
        containerOptions = {workflow.profile == "standard" ? "--entrypoint=''" : ""}
    }
    withLabel:mlst {
        container = "staphb/mlst:${params.mlst_version}"
    }
    shell = ['/bin/bash', '-euo', 'pipefail']
}

profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = true
        }
    }

    conda {
        conda.enabled = true
    }

    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:wf_common {
                container = "${params.aws_image_prefix}-wf-common:${params.wf.common_sha}-root"
            }
            withLabel:wfbacterialgenomes {
                container = "${params.aws_image_prefix}-wf-bacterial-genomes:${params.wf.container_sha}-root"
            }
            withLabel:prokka {
                container = "${params.aws_image_prefix}-prokka:${params.wf.container_sha_prokka}-root"
            }
            withLabel:medaka {
                container = "${params.aws_image_prefix}-medaka:${params.wf.container_sha_medaka}-root"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }
    aws.region = 'eu-west-1'
    aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
  overwrite = true
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
  overwrite = true
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
  overwrite = true
}

env {
    PYTHONNOUSERSITE = 1
}
